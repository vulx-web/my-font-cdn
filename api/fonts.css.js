/**
 * Dynamic CSS endpoint to emulate Google Fonts-style usage:
 *   /api/fonts.css?family=I+Love+You&family=College+Black&display=swap
 *
 * Returns @font-face rules pointing to files in /fonts.
 * Notes:
 * - We serve .otf only (format("opentype")) in this repo
 * - Unknown families are ignored
 */

/** @type {import('http').ServerResponse} */

const FAMILY_MAP = (() => {
  /** Normalize key for lookup */
  const key = (name) => name.trim().toLowerCase();
  const map = new Map();

  /** Helper to add a family */
  function add(family, file, weight = 400, style = 'normal') {
    const k = key(family);
    if (!map.has(k)) map.set(k, { family, variants: [] });
    map.get(k).variants.push({ file, weight, style });
  }

  // Known fonts in /fonts
  add('I Love You', 'I Love You.otf');
  add('Bubble Note', 'Bubble Note.otf');
  add('Cheery Note', 'Cheery Note.otf');
  add('Cute Charm', 'Cute Charm.otf');
  add('Glee Script', 'Glee Script.otf');
  add('Happy Hand', 'Happy Hand.otf');
  add('Jolly Scriptble', 'Jolly Scriptble.otf');
  add('Lovely Letter', 'Lovely Letter.otf');
  add('Playful Pen', 'Playful Pen.otf');
  add('Poppy Line', 'Poppy Line.otf');
  add('Smiley Script', 'Smiley Script.otf');
  add('Sunny Sketch', 'Sunny Sketch.otf');
  add('Whimsy Wonder', 'Whimsy Wonder.otf');
  add('College Black', 'College Black.otf', 900);
  add('Chicago Athletic Script 1', 'Chicago Athletic Script 1.otf');
  add('Chicago Athletic Script 2', 'Chicago Athletic Script 2.otf');
  add('Chicago Athletic Slab Serif 1', 'Chicago Athletic Slab Serif 1.otf');
  add('Chicago Athletic Slab Serif 2', 'Chicago Athletic Slab Serif 2.otf');
  add('Retro Vintage', 'Retro Vintage.otf');
  add('Simple Stacked', 'Simple Stacked.otf');
  add('Triple Rainbow', 'Triple Rainbow.otf');
  add('Grinch Wave', 'Grinch Wave.otf');
  add('Wicked Halloween', 'Wicked Halloween.otf');

  return map;
})();

function decodeFamilyParam(value) {
  // Google Fonts style: spaces as '+', optional axis like ":wght@700;900"
  const cleaned = value.replace(/\+/g, ' ');
  const [name] = cleaned.split(':');
  try {
    return decodeURIComponent(name);
  } catch {
    return name;
  }
}

function toCss(display, families) {
  let css = '/* Generated by /api/fonts.css */\n';
  for (const fam of families) {
    for (const v of fam.variants) {
      const filePath = '/fonts/' + encodeURIComponent(v.file).replace(/%2520/g, '%20');
      css += `@font-face{font-family:"${fam.family}";src:url("${filePath}") format("opentype");font-weight:${v.weight};font-style:${v.style};font-display:${display};}\n`;
    }
  }
  return css;
}

export default function handler(req, res) {
  const { family, display } = req.query;
  const fontDisplay = typeof display === 'string' && display ? display : 'swap';

  const requested = Array.isArray(family)
    ? family.filter(Boolean)
    : family
    ? [family]
    : [];

  const selected = [];
  if (requested.length === 0) {
    // No family specified â†’ return all families
    for (const [, value] of FAMILY_MAP) selected.push(value);
  } else {
    for (const raw of requested) {
      const name = decodeFamilyParam(raw);
      const found = FAMILY_MAP.get(name.trim().toLowerCase());
      if (found) selected.push(found);
    }
  }

  const css = toCss(fontDisplay, selected);

  res.setHeader('Content-Type', 'text/css; charset=utf-8');
  res.setHeader('Cache-Control', 'public, max-age=3600');
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.status(200).send(css);
}


